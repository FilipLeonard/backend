const path = require('path');
const fs = require('fs');

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const { graphqlHTTP } = require('express-graphql');

const graphqlSchema = require('./graphql/schema');
const graphqlResolvers = require('./graphql/resolvers');
const auth = require('./middleware/auth');

const MONGODB_URI = `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@clusternodecomplete.jg2xr.mongodb.net/${process.env.MONGO_DEFAULT_DATABASE}`;

const fileStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'images');
  },
  filename: (req, file, cb) => {
    cb(null, `${uuidv4()}_${file.originalname}`);
  },
});

const fileFilter = (req, file, cb) => {
  const allowedFileTypes = ['image/png', 'image/jpg', 'image/jpeg'];
  const isAllowed = allowedFileTypes.includes(file.mimetype);
  cb(null, isAllowed);
};

const app = express();

app.use(bodyParser.json()); // application/json
app.use(multer({ storage: fileStorage, fileFilter }).single('image'));

app.use('/images', express.static(path.join(__dirname, 'images')));

app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*'); // e.g. codepen.io
  res.setHeader(
    'Access-Control-Allow-Methods',
    'GET, POST, PUT, PATCH, DELETE'
  );
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(200);
  next();
});

app.use(auth);

app.put('/post-image', (req, res, next) => {
  console.log('/post-image middleware => \n', req.file, req.body);

  const userNotAuthenticated = !req.isAuth;
  if (userNotAuthenticated) {
    const error = new Error('Not authenticated');
    error.code = 401;
    throw error;
  }
  if (!req.file) {
    return res.status(200).json({ message: 'No file provided' });
  }
  if (req.body.oldPath) {
    clearImage(req.body.oldPath.replace('/', '\\'));
  }
  return res.status(201).json({
    message: 'File stored',
    filePath: req.file.path.replace('\\', '/'),
  });
});

app.use(
  '/graphql',
  graphqlHTTP({
    schema: graphqlSchema,
    rootValue: graphqlResolvers,
    graphiql: true,
    customFormatErrorFn(err) {
      if (!err.originalError) {
        return err; //error generated by graphQL e.g. wrong query
      }
      const { data } = err.originalError;
      const status = err.originalError.code || 500;
      const { message } = err || 'Default err: an error occured';
      return {
        message,
        status,
        data,
      };
    },
  })
);

app.use((error, req, res, next) => {
  const { status, message, data } = error;
  res.status(status || 500).json({ message, data });
});

mongoose
  .connect(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    const server = app.listen(8080);
  })
  .catch(console.log);

const clearImage = filePath => {
  const imagePath = path.join(__dirname, filePath);
  console.log('clearImage imagePath', imagePath);
  fs.unlink(imagePath, err => console.log(err));
};
